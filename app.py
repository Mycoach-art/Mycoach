import streamlit as st
import pandas as pd
import datetime

st.set_page_config(page_title='üöÄ Athl√®te Pro Tracker', layout='wide')
st.title('üèãÔ∏è Athl√®te Pro Tracker')

@st.cache_data
def load_data():
    try:
        return pd.read_csv('data.csv')
    except:
        return pd.DataFrame(columns=["Date", "Bloc", "S√©ance", "Exercice", "Set", "Charge", "R√©p√©titions", "Tempo", "Repos", "RPE", "Technique"])

def save_data(df):
    df.to_csv('data.csv', index=False)

data = load_data()

bloc = st.selectbox("Choisir le Bloc", ["Hypertrophie", "Force", "M√©tabolique"])

seance = st.selectbox("S√©lectionner la S√©ance", ["S√©ance 1", "S√©ance 2", "S√©ance 3"])

exercices_principaux = ["Squat profond", "D√©velopp√© couch√© halt√®res", "Tractions lest√©es neutres", "Soulev√© de terre roumain", "D√©velopp√© inclin√© halt√®res", "Rowing halt√®re unilat√©ral", "Front Squat", "D√©velopp√© d√©clin√© halt√®res", "Back Squat", "D√©velopp√© couch√© barre", "Tractions lest√©es", "Deadlift traditionnel", "D√©velopp√© inclin√© barre", "Rowing Pendlay lourd barre", "Front Squat lourd", "D√©velopp√© d√©clin√© barre lourd"]

exercices = {
    "Hypertrophie": {
        "S√©ance 1": ["Squat profond", "D√©velopp√© couch√© halt√®res", "Tractions lest√©es neutres", "Fentes march√©es halt√®res", "√âl√©vations lat√©rales halt√®res", "Oiseau halt√®res", "Curl marteau halt√®res", "Dips lest√©s"],
        "S√©ance 2": ["Soulev√© de terre roumain", "D√©velopp√© inclin√© halt√®res", "Rowing halt√®re unilat√©ral", "Hip Thrust", "Shrugs halt√®res", "Face Pull poulie", "Curl EZ barre", "Extensions triceps poulie corde"],
        "S√©ance 3": ["Front Squat", "D√©velopp√© d√©clin√© halt√®res", "Tirage horizontal poulie basse", "Leg Curl allong√©", "D√©velopp√© militaire halt√®res", "Curl inclin√© halt√®res", "Skullcrushers barre EZ"]
    },
    "Force": {
        "S√©ance 1": ["Back Squat", "D√©velopp√© couch√© barre", "Tractions lest√©es", "Split Squat bulgare", "D√©velopp√© militaire debout barre", "Curl halt√®res altern√©s"],
        "S√©ance 2": ["Deadlift traditionnel", "D√©velopp√© inclin√© barre", "Rowing Pendlay lourd barre", "Glute bridge barre", "Face Pull lourd poulie", "Curl marteau lourd"],
        "S√©ance 3": ["Front Squat lourd", "D√©velopp√© d√©clin√© barre lourd", "Tirage horizontal halt√®re lourd", "Leg Curl assis", "√âpaul√©-jet√© halt√®res", "Curl barre EZ lourd", "Extensions triceps poulie lourd"]
    },
    "M√©tabolique": {
        "S√©ance 1": ["Goblet Squat", "D√©velopp√© couch√© halt√®res tempo lent", "Lat Pulldown", "Leg Extension", "√âl√©vations lat√©rales halt√®res", "Oiseau halt√®res", "Curl concentr√© halt√®res", "Pushdown triceps poulie"],
        "S√©ance 2": ["Romanian Deadlift tempo lent", "D√©velopp√© inclin√© halt√®res haute rep", "Rowing machine tempo lent", "Hip Thrust haute rep", "Shrugs halt√®res", "Face Pull poulie", "Curl halt√®re inclin√©", "Extension triceps overhead corde"],
        "S√©ance 3": ["Front Squat l√©ger haute rep", "Push-ups lest√©s haute rep", "Tirage horizontal poulie haute rep", "Leg Curl l√©ger tempo lent", "D√©velopp√© halt√®res Arnold", "Curl marteau corde", "Kickback triceps poulie"]
    }
}

with st.form("nouvelle_seance"):
    st.subheader(f"üìå {bloc} - {seance} - {datetime.date.today()}")
    exercice = st.selectbox("Exercice", exercices[bloc][seance])
    set_no = st.number_input("Num√©ro du set", 1, 10, 1)
    charge = st.number_input("Charge (kg)", 0.0, 500.0, step=0.5)
    repetitions = st.number_input("R√©p√©titions", 1, 50, 10)
    tempo = st.text_input("Tempo (ex: 3-0-1-0)", "3-0-1-0")
    repos = st.number_input("Repos (sec)", 10, 300, 90)
    rpe = st.slider("RPE (Difficult√©)", 1, 10, 8)
    technique = st.selectbox("Technique d'intensification", ["Aucune", "Rest-Pause", "Drop Set", "Myo-Reps"])

    submitted = st.form_submit_button("‚úÖ Enregistrer ce set")

    if submitted:
        new_data = pd.DataFrame([{
            "Date": datetime.date.today(), "Bloc": bloc, "S√©ance": seance, "Exercice": exercice,
            "Set": set_no, "Charge": charge, "R√©p√©titions": repetitions, "Tempo": tempo,
            "Repos": repos, "RPE": rpe, "Technique": technique
        }])
        data = pd.concat([data, new_data], ignore_index=True)
        save_data(data)
        st.success("üéâ Donn√©es enregistr√©es avec succ√®s !")

if st.checkbox("üìã Voir mon Programme complet"):
    st.subheader("üóì Programme Complet")
    for bloc_name, seances in exercices.items():
        st.write(f"## {bloc_name}")
        for seance_name, exos in seances.items():
            st.write(f"### {seance_name}")
            st.write(", ".join(exos))
        st.write("**Semaine de deload apr√®s chaque bloc** (r√©duction 50% du volume)")

st.subheader("üìà Historique de progression")
st.dataframe(data.tail(10), use_container_width=True)

st.subheader("üéØ Objectifs prochaine s√©ance")
prochaines_charges = {}
for exo in exercices[bloc][seance]:
    exo_data = data[(data["Exercice"] == exo) & (data["Bloc"] == bloc)]
    if not exo_data.empty:
        derniere_charge = exo_data.iloc[-1]["Charge"]
        derniere_rpe = exo_data.iloc[-1]["RPE"]
        progression = 1.025 if exo in exercices_principaux and derniere_rpe <= 8 else 1.015
        prochaine_charge = round(derniere_charge * progression, 1)
        prochaines_charges[exo] = prochaine_charge

if prochaines_charges:
    st.table(pd.DataFrame(prochaines_charges.items(), columns=["Exercice", "Charge Prochaine S√©ance (kg)"]))
else:
    st.info("Aucune donn√©e ant√©rieure pour calculer la progression.")
