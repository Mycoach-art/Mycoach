import streamlit as st
import pandas as pd
import datetime

# Titre et style gamifi√©
st.set_page_config(page_title='üöÄ Athl√®te Pro Tracker', layout='wide')
st.title('üèãÔ∏è Athl√®te Pro Tracker')

# Chargement des donn√©es
@st.cache_data
def load_data():
    try:
        return pd.read_csv('data.csv')
    except:
        return pd.DataFrame(columns=["Date","Bloc","S√©ance","Exercice","Set","Charge","R√©p√©titions","Tempo","Repos","RPE","Technique"])

# Sauvegarde des donn√©es
def save_data(df):
    df.to_csv('data.csv', index=False)

data = load_data()

# S√©lection du bloc
bloc = st.selectbox("Choisir le Bloc", ["Hypertrophie", "Force", "M√©tabolique"])

# S√©lection de la s√©ance
seance = st.selectbox("S√©lectionner la S√©ance", ["S√©ance 1", "S√©ance 2", "S√©ance 3"])

# Exercices pr√©d√©finis
exercices = {
    "S√©ance 1": ["Squat profond", "D√©velopp√© couch√© halt√®res", "Tractions lest√©es", "Fentes march√©es", "√âl√©vations lat√©rales + Oiseau", "Curl marteau + Dips"],
    "S√©ance 2": ["Soulev√© de terre roumain", "D√©velopp√© inclin√© halt√®res", "Rowing halt√®re", "Hip Thrust", "Face Pull + Shrugs", "Curl EZ + Extension Triceps"],
    "S√©ance 3": ["Front Squat", "D√©velopp√© d√©clin√©", "Tirage horizontal", "Leg Curl", "D√©velopp√© militaire", "Curl inclin√© + Skullcrushers"]
}

# Formulaire pour enregistrer la s√©ance
with st.form("nouvelle_seance"):
    st.subheader(f"üìå {bloc} - {seance} - {datetime.date.today()}")
    exercice = st.selectbox("Exercice", exercices[seance])
    set_no = st.number_input("Num√©ro du set", 1, 10, 1)
    charge = st.number_input("Charge (kg)", 0.0, 500.0, step=0.5)
    repetitions = st.number_input("R√©p√©titions", 1, 50, 10)
    tempo = st.text_input("Tempo (ex: 3-0-1-0)", "3-0-1-0")
    repos = st.number_input("Repos (sec)", 10, 300, 90)
    rpe = st.slider("RPE (Difficult√©)", 1, 10, 8)
    technique = st.selectbox("Technique d'intensification", ["Aucune", "Rest-Pause", "Drop Set", "Myo-Reps"])

    submitted = st.form_submit_button("‚úÖ Enregistrer ce set")

    if submitted:
        new_data = pd.DataFrame([{
            "Date": datetime.date.today(), "Bloc": bloc, "S√©ance": seance, "Exercice": exercice,
            "Set": set_no, "Charge": charge, "R√©p√©titions": repetitions, "Tempo": tempo,
            "Repos": repos, "RPE": rpe, "Technique": technique
        }])
        data = pd.concat([data, new_data], ignore_index=True)
        save_data(data)
        st.success("üéâ Donn√©es enregistr√©es avec succ√®s !")

# Affichage des performances r√©centes
st.subheader("üìà Historique de progression")
st.dataframe(data.tail(10), use_container_width=True)

# Calcul progression prochaine s√©ance
st.subheader("üéØ Objectifs prochaine s√©ance")
prochaines_charges = {}
for exo in exercices[seance]:
    exo_data = data[(data["Exercice"] == exo) & (data["Bloc"] == bloc)]
    if not exo_data.empty:
        derniere_charge = exo_data.iloc[-1]["Charge"]
        prochaine_charge = round(derniere_charge * 1.025, 1)
        prochaines_charges[exo] = prochaine_charge

if prochaines_charges:
    st.table(pd.DataFrame(prochaines_charges.items(), columns=["Exercice", "Charge Prochaine S√©ance (kg)"]))
else:
    st.info("Aucune donn√©e ant√©rieure pour calculer la progression.")
